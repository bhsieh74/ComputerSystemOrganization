1.	The vals array is stored at 0x602010 
The partial_sums array is stored at 0x4006f0
I used “print &vals[0]” and “print &partial_sums[0]” to find the memory addresses. 

2.	The values in the array vals is now {1, 2, 4, 8, 16, 32, 64, 128, 256, 512}, or just the powers of 2 up to 2^10.
I set the breakpoint to line 24 and used “x/10dw vals” to print the contents of this array. 

3.	The values in the array vals by line 31 are now {1, 2, 4, 8, 16, 32, 64, 128, 0, 0}. The values in the array 
partial_sums by line 31 are now {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}. I set the breakpoint to line 31 and used “x/10dw vals”
and “x/10dw partial_sums”. These array values are not what they are supposed to be. 

4.	The decimal value of 602010 is 6299664. The decimal value of 400df0 is 4197872. The difference between these 
two values is 2101792 which does not make sense.

5.	The values of partial_sums by line 45 are {1, 3, 7, 15, 31, 63, 127, 255, 256, 259}. The values of partial_sums 
that is printed when the code is executed is also {1, 3, 7, 15, 31, 63, 127, 255, 256, 259}. So they are the same. 

6.	The partial_sums array prints 1, 3, 7, 15, 31, 63, 127, 255, 256, 259. The content changes at partial_sums[8].
This probably happens because partial_sums and vals overlap in memory at 0x602030, which only holds two zeroes. Because
vals and partial_sums overlap in memory, it affects the last two elements in partial_sums. 
